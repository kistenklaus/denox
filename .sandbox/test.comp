#version 460
#extension GL_KHR_shader_subgroup_basic : enable
layout(set = 0, binding = 0, std430) readonly buffer input_tensor {
  float inputTensor[];
};
layout(set = 0, binding = 1, std430) writeonly buffer output_tensor {
  float outputTensor[];
};
layout(set = 0, binding = 2, std430) readonly buffer weight_tensor {
  float weightTensor[];
};
layout(push_constant) uniform InputExtent {
  uint Input_W;
  uint Input_H;
};
shared float sh_input[972];
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main(void) {
  const uvec2 groupID = gl_WorkGroupID.xy;
  const uvec2 localID = gl_LocalInvocationID.xy;
  {
    const int rowSize = int(Input_W) * 3;
    const ivec2 tile = ivec2(int(groupID.x * 16) - 1, int(groupID.y * 16) - 1);
    const int tileStart = tile.y * int(rowSize) + tile.x * 3;
    const int h0 = int(gl_SubgroupID);
    const int hs0 = h0 * 54;
    const int hg0 = h0 * rowSize;
    if (tile.y + h0 < 0) {
      sh_input[hs0 + gl_SubgroupInvocationID + 0] = 0.0;
      sh_input[hs0 + gl_SubgroupInvocationID + 32] = 0.0;
    } else {
      if (3 * tile.x + int(gl_SubgroupInvocationID) < 0) {
        sh_input[hs0 + gl_SubgroupInvocationID + 0] = 0.0;
      } else {
        sh_input[hs0 + gl_SubgroupInvocationID + 0] = inputTensor[tileStart + hg0 + gl_SubgroupInvocationID + 0];
      }
      if (gl_SubgroupInvocationID < 22) {
        if (3 * tile.x + int(gl_SubgroupInvocationID) + 32 >= Input_W * 3) {
          sh_input[hs0 + gl_SubgroupInvocationID + 32] = 0.0;
        } else {
          sh_input[hs0 + gl_SubgroupInvocationID + 32] = inputTensor[tileStart + hg0 + gl_SubgroupInvocationID + 32];
        }
      }
    }
    
    const int h1 = int(gl_SubgroupID) + 8;
    const int hs1 = h1 * 54;
    const int hg1 = h1 * rowSize;
    if (3 * tile.x + int(gl_SubgroupInvocationID) < 0) {
      sh_input[hs1 + gl_SubgroupInvocationID + 0] = 0.0;
    } else {
      sh_input[hs1 + gl_SubgroupInvocationID + 0] = inputTensor[tileStart + hg1 + gl_SubgroupInvocationID + 0];
    }
    if (gl_SubgroupInvocationID < 22) {
      if (3 * tile.x + int(gl_SubgroupInvocationID) + 32 >= Input_W * 3) {
        sh_input[hs1 + gl_SubgroupInvocationID + 32] = 0.0;
      } else {
        sh_input[hs1 + gl_SubgroupInvocationID + 32] = inputTensor[tileStart + hg1 + gl_SubgroupInvocationID + 32];
      }
    }
    
    const int h2 = int(gl_SubgroupID) + 16;
    const int hs2 = h2 * 54;
    const int hg2 = h2 * rowSize;
    if (gl_SubgroupID < 2) {
      if (tile.y + h2 >= Input_H) {
        sh_input[hs2 + gl_SubgroupInvocationID + 0] = 0.0;
        sh_input[hs2 + gl_SubgroupInvocationID + 32] = 0.0;
      } else {
        if (3 * tile.x + int(gl_SubgroupInvocationID) < 0) {
          sh_input[hs2 + gl_SubgroupInvocationID + 0] = 0.0;
        } else {
          sh_input[hs2 + gl_SubgroupInvocationID + 0] = inputTensor[tileStart + hg2 + gl_SubgroupInvocationID + 0];
        }
        if (gl_SubgroupInvocationID < 22) {
          if (3 * tile.x + int(gl_SubgroupInvocationID) + 32 >= Input_W * 3) {
            sh_input[hs2 + gl_SubgroupInvocationID + 32] = 0.0;
          } else {
            sh_input[hs2 + gl_SubgroupInvocationID + 32] = inputTensor[tileStart + hg2 + gl_SubgroupInvocationID + 32];
          }
        }
      }
    }
  }
  memoryBarrierShared();
  barrier();
}
