#version 460

#extension GL_EXT_control_flow_attributes : require
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_16bit_storage                   : require

layout(set = 0, binding = 0, std430) readonly buffer input_buf {
    istype input_tensor_blob[];
};

layout(set = 0, binding = 1, std430) writeonly buffer output_buf {
    ostype output_tensor_blob[];
};

layout(push_constant) uniform PushConstant {
    uint W;
    uint H;
} pc;

const uint TILE_C = WG_C * INVOC_C;
const uint TILE_H = WG_H * INVOC_H;
const uint TILE_W = WG_W * INVOC_W;

layout(local_size_x = WG_C, local_size_y = WG_W, local_size_z = WG_H) in;
void main() {
    #if IN_ATYPE_SIZE == 2 && OUT_ATYPE_SIZE == 2
    #if defined(IN_LAYOUT_HWC) && defined(OUT_LAYOUT_HWC)
    // => istype: uint16_t, ostype: uint16_t, atype: float16_t

    const uint wgc0 = gl_WorkGroupID.x * TILE_C;
    const uint wgw0 = gl_WorkGroupID.y * TILE_W;
    const uint wgh0 = gl_WorkGroupID.z * TILE_H;

    const uint c0 = wgc0 + gl_LocalInvocationID.x;
    const uint w20 = wgw0 + gl_LocalInvocationID.y;
    const uint h20 = wgh0 + gl_LocalInvocationID.z;

    const uint H = pc.H;
    const uint W = pc.W;
    const uint H2 = H * SCALING_FACTOR;
    const uint W2 = W * SCALING_FACTOR;

    for (uint zh = 0; zh < INVOC_H; ++zh) {
        const uint h2 = h20 + zh * WG_H;
        if (h2 >= H2) {
            break;
        }
        const uint h = h2 / SCALING_FACTOR;

        for (uint zw = 0; zw < INVOC_W; ++zw) {
            const uint w2 = w20 + zw * WG_W;
            if (w2 >= W2) {
                break;
            }
            const uint w = w2 / SCALING_FACTOR;

            const uint src_o = (h * W + w) * CH;
            const uint dst_o = (h2 * W2 + w2) * CH;
            for (uint zc = 0; zc < INVOC_C; ++zc) {
                const uint c = c0 + zc * WG_C;
                if (c >= CH) {
                    break;
                }
                output_tensor_blob[dst_o + c] = input_tensor_blob[src_o + c];
            }
        }
    }

    // for (uint zh = 0; zh < INVOC_H; ++zh) {
    //     for (uint zw = 0; zw < INVOC_W; ++zw) {
    //         for (uint zc = 0; zc < INVOC_C; ++zc) {
    //             const uint h = h0 + zh * WG_H;
    //             const uint h2 = h / SCALING_FACTOR;
    //             const uint w = w0 + zw * WG_W;
    //             const uint c = c0 + zc * WG_C;
    //             if (h < H && w < W && c < CH) {
    //                 const uint o = h * W * CH + w * CH + c;
    //                 output_tensor_blob[o] = input_tensor_blob[o];
    //             }
    //         }
    //     }
    // }

    #elif defined(IN_LAYOUT_HWC8) && defined(OUT_LAYOUT_HWC8)
    const uint TILE_C8 = TILE_C / 8;
    const uint INVOC_C8 = INVOC_C / 8;
    const uint CH8 = CH / 8;

    const uint wgc08 = gl_WorkGroupID.x * TILE_C8;
    const uint wgw0 = gl_WorkGroupID.y * TILE_W;
    const uint wgh0 = gl_WorkGroupID.z * TILE_H;

    const uint c08 = wgc08 + gl_LocalInvocationID.x;
    const uint w20 = wgw0 + gl_LocalInvocationID.y;
    const uint h20 = wgh0 + gl_LocalInvocationID.z;

    const uint H = pc.H;
    const uint W = pc.W;
    const uint H2 = H * SCALING_FACTOR;
    const uint W2 = W * SCALING_FACTOR;

    #pragma unroll
    for (uint zh = 0; zh < INVOC_H; ++zh) {
        const uint h2 = h20 + zh * WG_H;
        if (h2 >= H2) {
            break;
        }

        const uint h = h2 / SCALING_FACTOR;

        #pragma unroll
        for (uint zw = 0; zw < INVOC_W; ++zw) {
            const uint w2 = w20 + zw * WG_W;
            if (w2 >= W2) {
                break;
            }
            const uint w = w2 / SCALING_FACTOR;

            #pragma unroll
            for (uint zc8 = 0; zc8 < INVOC_C8; ++zc8) {
                const uint c8 = c08 + zc8 * WG_C;
                if (c8 < CH8) {
                    const uint src_o = h * W * CH8 + w * CH8 + c8;
                    const uint dst_o = h2 * W2 * CH8 + w2 * CH8 + c8;
                    output_tensor_blob[dst_o] = input_tensor_blob[src_o];
                }
            }
        }
    }

    #elif defined(IN_LAYOUT_CHWC8) && defined(OUT_LAYOUT_CHWC8)

    const uint TILE_C8 = TILE_C / 8;
    const uint INVOC_C8 = INVOC_C / 8;
    const uint CH8 = CH / 8;

    const uint wgc08 = gl_WorkGroupID.x * TILE_C8;
    const uint wgw0 = gl_WorkGroupID.y * TILE_W;
    const uint wgh0 = gl_WorkGroupID.z * TILE_H;

    const uint c08 = wgc08 + gl_LocalInvocationID.x;
    const uint w20 = wgw0 + gl_LocalInvocationID.y;
    const uint h20 = wgh0 + gl_LocalInvocationID.z;

    const uint H = pc.H;
    const uint W = pc.W;
    const uint H2 = H * SCALING_FACTOR;
    const uint W2 = W * SCALING_FACTOR;

    for (uint zc8 = 0; zc8 < INVOC_C8; ++zc8) {
        const uint c8 = c08 + zc8 * WG_C;
        if (c8 >= CH8) {
            break;
        }

        for (uint zh = 0; zh < INVOC_H; ++zh) {
            const uint h2 = h20 + zh * WG_H;
            if (h2 >= H2) {
                break;
            }
            const uint h = h2 / SCALING_FACTOR;
            for (uint zw = 0; zw < INVOC_W; ++zw) {
                const uint w2 = w20 + zw * WG_W;
                if (w2 >= W2) {
                    break;
                }
                const uint w = w2 / SCALING_FACTOR;

                const uint src_o = c8 * W * H + h * W + w;
                const uint dst_o = c8 * W2 * H2 + h2 * W2 + w2;

                output_tensor_blob[dst_o] = input_tensor_blob[src_o];
            }
        }
    }

    #else
    UNSUPPORTED_LAYOUT;
    #endif

    #else
    UNSUPPORTED_TYPE; // we only support f16 for now.
    #endif
}
