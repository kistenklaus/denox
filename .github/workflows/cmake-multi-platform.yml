name: CMake (Linux, multiple toolchains)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # Intentionally track GitHub's default â€” this defines "stable" toolchains.
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        toolchain: [gcc-stable, gcc-latest, clang-stable, clang-latest]
        build_type: [Release]

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Install common deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential protobuf-compiler libprotobuf-dev ca-certificates curl gnupg libvulkan1 vulkan-tools libvulkan-dev libshaderc-dev glslc glslang-tools

      # --- GCC (stable = default from ubuntu-latest) ---
      - name: Setup GCC (stable)
        if: matrix.toolchain == 'gcc-stable'
        run: |
          echo "CC=/usr/bin/gcc"  >> $GITHUB_ENV
          echo "CXX=/usr/bin/g++" >> $GITHUB_ENV
          echo "EXTRA_CXXFLAGS="  >> $GITHUB_ENV
          echo "EXTRA_LDFLAGS="   >> $GITHUB_ENV

      # --- GCC (latest from Toolchain PPA; auto-detect highest g++-NN) ---
      - name: Setup GCC (latest)
        if: matrix.toolchain == 'gcc-latest'
        shell: bash
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          # Find the highest available g++-NN package name, e.g. g++-15
          PKG=$(apt-cache search -n '^g\+\+-[0-9]+$' | awk '{print $1}' | sed 's/g++-//' | sort -V | tail -n1)
          if [ -z "$PKG" ]; then
            echo "Failed to detect latest g++; falling back to system default" >&2
            echo "CC=/usr/bin/gcc"  >> $GITHUB_ENV
            echo "CXX=/usr/bin/g++" >> $GITHUB_ENV
          else
            echo "Detected latest g++ version: $PKG"
            sudo apt-get install -y g++-"$PKG"
            echo "CC=/usr/bin/gcc-$PKG"  >> $GITHUB_ENV
            echo "CXX=/usr/bin/g++-$PKG" >> $GITHUB_ENV
          fi
          echo "EXTRA_CXXFLAGS="  >> $GITHUB_ENV
          echo "EXTRA_LDFLAGS="   >> $GITHUB_ENV

      # --- Clang (stable from Ubuntu repos) ---
      - name: Setup Clang (stable)
        if: matrix.toolchain == 'clang-stable'
        run: |
          sudo apt-get install -y clang
          echo "CC=/usr/bin/clang"    >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++" >> $GITHUB_ENV
          echo "EXTRA_CXXFLAGS="  >> $GITHUB_ENV
          echo "EXTRA_LDFLAGS="   >> $GITHUB_ENV

      # --- Clang (latest from apt.llvm.org) + libc++ + disable {fmt} consteval ---
      - name: Setup Clang (latest)
        if: matrix.toolchain == 'clang-latest'
        shell: bash
        run: |
          curl -fsSL https://apt.llvm.org/llvm.sh -o llvm.sh
          sudo bash llvm.sh
          VER=$(ls /usr/bin/clang-[0-9]* 2>/dev/null | sed -E 's|.*/clang-([0-9]+)$|\1|' | sort -V | tail -n1)
          if [ -z "$VER" ]; then
            echo "Failed to detect clang version from apt.llvm.org" >&2
            exit 1
          fi
          sudo apt-get update
          sudo apt-get install -y libc++-${VER}-dev libc++abi-${VER}-dev
          echo "CC=/usr/bin/clang-${VER}"    >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++-${VER}" >> $GITHUB_ENV
          # Use libc++ and relax {fmt} consteval path for this axis only
          echo "EXTRA_CXXFLAGS=-stdlib=libc++ -DFMT_CONSTEVAL=" >> $GITHUB_ENV
          echo "EXTRA_LDFLAGS=-stdlib=libc++"                   >> $GITHUB_ENV

      - name: Show toolchain
        run: |
          echo "CC=$CC"
          echo "CXX=$CXX"
          echo "EXTRA_CXXFLAGS=$EXTRA_CXXFLAGS"
          echo "EXTRA_LDFLAGS=$EXTRA_LDFLAGS"
          $CXX --version

      - name: Configure CMake
        run: >
          cmake -S ${{ github.workspace }}
          -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER="$CC"
          -DCMAKE_CXX_COMPILER="$CXX"
          -DCMAKE_CXX_FLAGS="$EXTRA_CXXFLAGS"
          -DCMAKE_EXE_LINKER_FLAGS="$EXTRA_LDFLAGS"
          -DCMAKE_SHARED_LINKER_FLAGS="$EXTRA_LDFLAGS"
          -DCMAKE_C_STANDARD=17
          -DCMAKE_CXX_STANDARD=20
          -DCMAKE_CXX_STANDARD_REQUIRED=ON

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target denox_test -j$(nproc)

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}
